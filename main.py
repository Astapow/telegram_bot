import json
import sqlite3

import requests
import telebot
from telebot import types
import webbrowser

from settings import BOT_TOKEN, API_KEY

bot = telebot.TeleBot(BOT_TOKEN)
API = API_KEY
name = None


# @bot.message_handler(commands=['start'])
# def url(message):
#     markup = types.InlineKeyboardMarkup()
#     btn1 = types.InlineKeyboardButton(text='–ú–æ–π —Å–∞–π—Ç', url='http://127.0.0.1:8000')
#     markup.add(btn1)
#     bot.send_message(message.from_user.id, "–ü–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")


# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton('–£–∫—Ä–∞—ñ–Ω—Å—å–∫–∏–π')
#     btn2 = types.KeyboardButton('–†—É—Å—Å–∫–∏–π')
#     btn3 = types.KeyboardButton('English')
#     markup.add(btn1, btn2, btn3)
#     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose your language", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute(
        'CREATE TABLE IF NOT EXISTS users '
        '(id int auto_increment primary key,'
        ' name varchar(50),'
        ' pass varchar(50)'
        ')')
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Çüëã, –¥–∞–≤–∞–π –º—ã —Ç–µ–±—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–ºüòé –í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    bot.register_next_step_handler(message, user_name)


def user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æüëç, –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, user_pass)


def user_pass(message):
    password = message.text.strip()

    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute("INSERT INTO users (name, pass) VALUES ('%s', '%s')" % (name, password))
    conn.commit()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users')
    markup.add(btn1)
    bot.send_message(message.chat.id, "–°—É–ø–µ—Äüëç, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()

    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    info = ''
    for elem in users:
        info += f'–ò–º—è: {elem[1]}, –ü–∞—Ä–æ–ª—å: {elem[2]}\n'

    cur.close()
    conn.close()

    bot.send_message(call.message.chat.id, info)


@bot.message_handler(commands=['help'])
def questions(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã")
    markup.row(btn1)
    btn2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É")
    btn3 = types.KeyboardButton("–í–æ–ø—Ä–æ—Å 2")
    markup.row(btn2, btn3)
    bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫",
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def on_click(message):
    if message.text == '–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã':
        bot.send_message(message.chat.id, '–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á?')
    elif message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æüëå, –ø—Ä–æ—Å—Ç–æ –≤–ø–∏—à–∏ –≥–æ—Ä–æ–¥!')
        bot.register_next_step_handler(message, get_weather)
    elif message.text == '–í–æ–ø—Ä–æ—Å 2':
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç 2')


# @bot.message_handler(commands=['help'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
#     markup.add(btn1)
#     bot.send_message(message.from_user.id, "<b>–ü—Ä–∏–≤–µ—Ç</b>! <em>–ß–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á</em>", parse_mode='html')


@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric')
    if res.status_code == 200:
        data = json.loads(res.text)
        temp = data["main"]["temp"]
        weather = data["weather"][0]["main"]

        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {temp}¬∞C')

        if weather == "Clouds":
            image = 'Clouds.png'
        elif weather == "Rain":
            image = "rain.jpg"
        elif weather == "Snow":
            image = 'snow.jpg'
        elif weather == "Clear":
            image = 'Clear.jpg'

        file = open('image/' + image, 'rb')
        bot.send_photo(message.chat.id, file)
    else:
        bot.reply_to(message, f'–ì–æ—Ä–æ–¥ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')


@bot.message_handler(commands=['site', 'website'])
def get_site(message):
    webbrowser.open('https://google.com')


@bot.message_handler(content_types=['photo', 'video', 'audio'])
def get_media(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url='https://google.com')
    markup.row(btn1)
    btn2 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª', callback_data='delete')
    btn3 = types.InlineKeyboardButton('–†–µ–¥–æ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç', callback_data='edit')
    markup.row(btn2, btn3)
    bot.reply_to(message, '–°–ø–∞—Å–∏–±–æ —è –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_message(call):
    if call.data == 'delete':
        bot.delete_message(call.message.chat.id, call.message.message_id - 1)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif callback.data == 'edit':
        new_text = "This is the updated text."
        bot.edit_message_text(new_text, call.message.chat.id, call.message.message_id)


@bot.message_handler(content_types=['text'])
def get_text_message(message):
    if message.text == '–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–¢–µ–º–∞1 üëå')
        btn2 = types.KeyboardButton('–¢–µ–º–∞2 üëç')
        btn3 = types.KeyboardButton('–¢–µ–º–∞3 üòé')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id, "–ó–∞–¥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

    elif message.text == '–¢–µ–º–∞1 üëå':
        bot.send_message(message.from_user.id, '–ú–æ–π –æ—Ç–≤–µ—Ç 1')

    elif message.text == '–¢–µ–º–∞2 üëç':
        bot.send_message(message.from_user.id, '–ú–æ–π –æ—Ç–≤–µ—Ç 2')

    elif message.text == '–¢–µ–º–∞3 üòé':
        bot.send_message(message.from_user.id, '–ú–æ–π –æ—Ç–≤–µ—Ç 3')


bot.infinity_polling()
